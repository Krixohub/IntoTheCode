<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="base0001" xml:space="preserve">
    <value>Error. Resource is not the right type. Modifiers must be public</value>
  </data>
  <data name="base0002" xml:space="preserve">
    <value>Can't open windows event log for writing</value>
  </data>
  <data name="base0003" xml:space="preserve">
    <value>The resource can't be found: {0}. Add resource file to Post</value>
  </data>
  <data name="base0004" xml:space="preserve">
    <value>Test message</value>
  </data>
  <data name="MsgChannelError" xml:space="preserve">
    <value>Text channel '{0}' not working</value>
  </data>
  <data name="MsgUnhandledException" xml:space="preserve">
    <value>An unhandled exception happened</value>
  </data>
  <data name="SomeError" xml:space="preserve">
    <value>Something terrible with {0} has happened</value>
  </data>
  <data name="base0005" xml:space="preserve">
    <value>Value must be a UnaryExpression or a MemberExpression</value>
  </data>
  <data name="base0006" xml:space="preserve">
    <value>Lambda expression is null</value>
  </data>
  <data name="base0007" xml:space="preserve">
    <value>Deeper error</value>
  </data>
  <data name="DevelOnly" xml:space="preserve">
    <value>Devel. only: </value>
  </data>
  <data name="LineAndCol" xml:space="preserve">
    <value>Line {0}, colomn {1}</value>
  </data>
  <data name="p01" xml:space="preserve">
    <value>First rule '{0} must represent all document and have Tag=true</value>
  </data>
  <data name="p02" xml:space="preserve">
    <value>Can't read '{0}'</value>
  </data>
  <data name="p03" xml:space="preserve">
    <value>IntoTheCode developer error: {0}</value>
  </data>
  <data name="p04" xml:space="preserve">
    <value>No Grammar rules</value>
  </data>
  <data name="p05" xml:space="preserve">
    <value>End of input not reached.</value>
  </data>
  <data name="pb01" xml:space="preserve">
    <value>Element content type not set, {0}, {1} , {2}</value>
  </data>
  <data name="pb02" xml:space="preserve">
    <value>{0}: An expression element can't be siebling with other elements</value>
  </data>
  <data name="pb03" xml:space="preserve">
    <value>{0}: The 'or' symbol is misplaced in expression</value>
  </data>
  <data name="pb04" xml:space="preserve">
    <value>Parser factory: No read element for '{0}'</value>
  </data>
  <data name="pb05" xml:space="preserve">
    <value>Link grammar {1}. Identifier {0} is defined twice</value>
  </data>
  <data name="pb06" xml:space="preserve">
    <value>Identifier '{0}' not found in Grammar</value>
  </data>
  <data name="pb07" xml:space="preserve">
    <value>Settings: Identifier '{0}' cant be resolved</value>
  </data>
  <data name="pb08" xml:space="preserve">
    <value>Settings: Identifier '{0}' Property '{1}' cant be resolved</value>
  </data>
  <data name="pb09" xml:space="preserve">
    <value>First rule '{0}' must have Collapse=false</value>
  </data>
  <data name="pe01" xml:space="preserve">
    <value>Grammar error ({0}). Expecting identifier, found EOF.</value>
  </data>
  <data name="pe02" xml:space="preserve">
    <value>Grammar error ({0}). First charactor is not allowed.</value>
  </data>
  <data name="pe03" xml:space="preserve">
    <value>Grammar error ({0}). Expecting string, found EOF.</value>
  </data>
  <data name="pe04" xml:space="preserve">
    <value>Grammar error ({0}). Expecting string.</value>
  </data>
  <data name="pe05" xml:space="preserve">
    <value>Grammar error ({0}). Expecting string ending.</value>
  </data>
  <data name="pe07" xml:space="preserve">
    <value>Grammar error ({0}). Expecting symbol '{1}', found '{2}'</value>
  </data>
  <data name="pb10" xml:space="preserve">
    <value>The value of property '{0}' must be a positive integer</value>
  </data>
  <data name="pe08" xml:space="preserve">
    <value>Syntax error ({0}). Expecting value for expression.</value>
  </data>
  <data name="pe09" xml:space="preserve">
    <value>Syntax error ({0}). Expecting operator for expression.</value>
  </data>
  <data name="pe10" xml:space="preserve">
    <value>Syntax error ({0}). Expecting {1}, found {2}.</value>
  </data>
  <data name="pe11" xml:space="preserve">
    <value>Can't parse '{0}' to integer (too long).</value>
  </data>
  <data name="pb11" xml:space="preserve">
    <value>The rule '{0}' must have a non recursive path.</value>
  </data>
</root>