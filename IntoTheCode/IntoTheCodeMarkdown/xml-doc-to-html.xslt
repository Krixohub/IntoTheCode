<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:msxsl="urn:schemas-microsoft-com:xslt" exclude-result-prefixes="msxsl"
>
 <!--   <xsl:output method="xml" indent="yes"/>

    <xsl:template match="@* | node()">
        <xsl:copy>
            <xsl:apply-templates select="@* | node()"/>
        </xsl:copy>
    </xsl:template>
</xsl:stylesheet>

<xsl:stylesheet version="1.0">-->

  <!--Insert this line below into xml file-->
  <!--<?xml-stylesheet href="visual-studio-xml-doc.xsl" type="text/xsl"?>-->

  <!-- from http://www.gocek.net/software/visual-studio-doc.htm -->

  <!-- Display a documentation file generated by Visual Studio from XML comments. -->
  <!-- Copyright 2010 by Gary Gocek. -->
  <!-- Tested with C# and VS 2005 and VS 2003 -->
  <!-- Set a var with the name of the assembly for the documented project. -->

  <xsl:variable name="myAssembly" select="/doc/assembly"/>

  <xsl:template match="doc">
    <HTML>
      <HEAD>
        <TITLE>Visual Studio XML Documentation Stylesheet v20100201</TITLE>
      </HEAD>
      <BODY>
        <center>
          <b>
            <u>
              <xsl:value-of select="assembly/name"/> documentation
            </u>
          </b>
        </center>
        <p/>
        <xsl:call-template name="findClasses"/>
        <br/>
        <br/>
        <br/>
        <br/>
        <!--<xsl:apply-templates select="members"/>-->
      </BODY>
    </HTML>
  </xsl:template>


  
  <xsl:template match="exception">
    <!-- Show the exceptions. --><i>* Exception: </i>(<xsl:value-of select="@cref"/>) <xsl:value-of select="."/><br/>
  </xsl:template>


  <!-- ////////////////////////////////////// -->
  <xsl:template match="summary">
    <br/>
    <!-- Show the summary. -->
    <i>* Summary: </i>
    <xsl:value-of select="."/>
    <br/>
  </xsl:template>
  <!-- ////////////////////////////////////// -->
  <xsl:template match="remarks">
    <xsl:variable name="rem" select="."/>
    <xsl:variable name="link" select="substring-after(see/@cref,'T:')"/>
    <xsl:if test="contains($rem,'Inherids')">
      <br/>Inherids
      <a>
        <xsl:attribute name="href">
          <xsl:value-of select="'#'"/>
          <xsl:value-of select="$link"/>
        </xsl:attribute>
        <xsl:value-of select="$link"/>
      </a>
    </xsl:if>
  </xsl:template>
  <!-- ////////////////////////////////////// -->
  <xsl:template match="param">
    <!-- Show the param names in blue. -->
    <i>* Param: </i>
    <b>
      <font color="blue">
        <code>
          <xsl:value-of select="@name"/>
        </code>
      </font>:
    </b>
    <xsl:value-of select="."/>
    <br/>
  </xsl:template>
  <!-- ////////////////////////////////////// -->
  <xsl:template match="returns">
    <!--
 Show the returns. Note that the XML file does not provide the actual datatype that is returned,
			so it can be helpful to include that in the returns comment. 
-->
    <i>* Returns: </i>
    <xsl:value-of select="."/>
    <br/>
  </xsl:template>
  <!-- ////////////////////////////////////// -->

  <xsl:template name="class">
    <xsl:param name="ns" />
    <xsl:param name="cn" />
    <xsl:param name="fn" />
    <br/><br/>
      
      <code>
      <big>
      <big>
          <font color="red">

            <a>
              <xsl:attribute name="name">
                <xsl:value-of select="$fn"/>
                <!--<xsl:value-of select="concat('"<a name="',concat($fn,'"/>'))"/>-->
              </xsl:attribute>
              Class: <xsl:value-of select="$cn"/>
          </a>
  </font>
      </big>
    </big>
    (Namespace: <xsl:value-of select="$ns"/>)
    </code>
    <xsl:apply-templates select="remarks"/>
    <xsl:apply-templates select="summary"/>
    <xsl:call-template name="findMembers">
      <xsl:with-param name="ns" select="$ns"/>
      <xsl:with-param name="cn" select="$cn"/>
      <xsl:with-param name="fn" select="$fn"/>
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="classProp">
    <xsl:param name="ns" />
    <xsl:param name="cn" />
    <xsl:param name="fn" />
    <xsl:variable name="memberName" select="substring-after(@name,concat($fn,'.'))"/>
    <br/>
    <code><big><font color="blue">
          Prop: <xsl:value-of select="$memberName"/>
    </font></big></code>
    <xsl:apply-templates select="summary"/>
  </xsl:template>
  
  <xsl:template name="classMethod">
    <xsl:param name="ns" />
    <xsl:param name="cn" />
    <xsl:param name="fn" />
    <xsl:variable name="methodWithParams" select="substring-after(@name,concat($fn,'.'))"/>
    <xsl:variable name="method" select="substring-before(concat($methodWithParams,'('),'(')"/>
    <!--<xsl:variable name="params" select="substring-after($methodWithParams, $method)"/>-->
      <xsl:variable name="params">
        <xsl:if test="$methodWithParams != $method">
          <xsl:value-of select="substring-after($methodWithParams, $method)"/>
        </xsl:if>
        <xsl:if test="$methodWithParams = $method">
          <xsl:value-of select="'()'"/>
        </xsl:if>
      </xsl:variable> 

    <!-- The class name, method, and args follow the period after the assembly name. -->
    <!--<xsl:variable name="myClassMethodsArgs">
      <xsl:value-of select="substring-after(@name,concat($ns,'.'))"/>
    </xsl:variable>-->

    <br/><code><big><font color="blue">
        <xsl:if test="$method = '#ctor'">
          Constructor:
        </xsl:if>
        <xsl:if test="$method != '#ctor'">
          Function: <xsl:value-of select="$method"/>
        </xsl:if>
    </font></big><xsl:value-of select="$params"/></code>
    <xsl:apply-templates select="summary"/>
    <xsl:apply-templates select="param"/>
    <xsl:apply-templates select="returns"/>
  </xsl:template>

  <!-- ////////////////////////////////////// -->

  <!-- //////////////////////////////////////////////// -->

  <!-- Find all members for a class: <doc><members><member name=""> -->
  <xsl:template name="findMembers">
    <xsl:param name="ns" />
    <xsl:param name="cn" />
    <xsl:param name="fn" />

    <xsl:variable name="pName" select="concat('P:',$fn)"/>
    <xsl:variable name="mName" select="concat('M:',$fn)"/>

    <xsl:for-each select="../member">
      <xsl:variable name="memberName" select="@name"/>
      <xsl:if test="contains($memberName,$pName)">
        <xsl:call-template name="classProp">
          <xsl:with-param name="ns" select="$ns"/>
          <xsl:with-param name="cn" select="$cn"/>
          <xsl:with-param name="fn" select="$fn"/>
        </xsl:call-template>
      </xsl:if>
      <xsl:if test="contains($memberName,$mName)">
        <xsl:call-template name="classMethod">
          <xsl:with-param name="ns" select="$ns"/>
          <xsl:with-param name="cn" select="$cn"/>
          <xsl:with-param name="fn" select="$fn"/>
        </xsl:call-template>
      </xsl:if>
    </xsl:for-each>
  </xsl:template>

  <!-- Find all classes: <doc> - <members><member name="T:"> -->
  <xsl:template name="findClasses">
    <xsl:for-each select="members/member">
      <!--<xsl:for-each select="members/member[contains(@name, 'MoehlData.Basic.TreeGraph.TreeNode')]">-->
      <xsl:variable name="memberName" select="@name"/>
      <xsl:if test="contains($memberName,'T:')">
        <xsl:variable name="fullClassName" select="substring-after($memberName,'T:')"/>
        <xsl:call-template name="classNamespaceLoop">
          <xsl:with-param name="ns" select="''"/>
          <xsl:with-param name="cn" select="$fullClassName"/>
          <xsl:with-param name="fn" select="$fullClassName"/>
        </xsl:call-template>
      </xsl:if>
    </xsl:for-each>
  </xsl:template>

  <!-- This template gets the qualified classname and calls the 'class' template with namespace and classname. -->
  <xsl:template name="classNamespaceLoop">
    <xsl:param name="ns" />
    <xsl:param name="cn" />
    <xsl:param name="fn" />
    <xsl:choose><!--Call 'class' template-->
      <xsl:when test="not(contains($cn,'.'))">
        <xsl:call-template name="class">
          <xsl:with-param name="ns" select="substring-after($ns,'.')"/>
          <xsl:with-param name="cn" select="$cn"/>
          <xsl:with-param name="fn" select="$fn"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise><!--Make recursive call-->
        <xsl:variable name="ns1" select="concat(concat($ns,'.'),substring-before($cn,'.'))"/>
        <xsl:variable name="cn1" select="substring-after($cn,'.')"/>
        <xsl:call-template name="classNamespaceLoop">
          <xsl:with-param name="ns" select="$ns1"/>
          <xsl:with-param name="cn" select="$cn1"/>
          <xsl:with-param name="fn" select="$fn"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
</xsl:stylesheet>